{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nvar config = {\n  apiKey: \"AIzaSyBHQX6mu1EqWkhWYl8L_54bkkgQGOALAkg\",\n  authDomain: \"react-crwn-clothing-dfab6.firebaseapp.com\",\n  databaseURL: \"https://react-crwn-clothing-dfab6.firebaseio.com\",\n  projectId: \"react-crwn-clothing-dfab6\",\n  storageBucket: \"react-crwn-clothing-dfab6.appspot.com\",\n  messagingSenderId: \"998041460050\",\n  appId: \"1:998041460050:web:098a095ab23792e436ee8b\",\n  measurementId: \"G-9RZKVMH8JG\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.error('Error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const convertCollectionSnapshotToMap = collections => {\n  const transformCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n}; // Utilitary to insert data to firebase.\n// CollectionKey: name of the collection document\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n}; // Initialize Firebase\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/diogosilva/Desktop/complete-react-developer-in-2020/crwn-clothing/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","error","console","message","convertCollectionSnapshotToMap","collections","transformCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","collection","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","obj","newDocRef","commit","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","initializeApp","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AAEA,IAAIC,MAAM,GAAG;AACTC,EAAAA,MAAM,EAAE,yCADC;AAETC,EAAAA,UAAU,EAAE,2CAFH;AAGTC,EAAAA,WAAW,EAAE,kDAHJ;AAITC,EAAAA,SAAS,EAAE,2BAJF;AAKTC,EAAAA,aAAa,EAAE,uCALN;AAMTC,EAAAA,iBAAiB,EAAE,cANV;AAOTC,EAAAA,KAAK,EAAE,2CAPE;AAQTC,EAAAA,aAAa,EAAE;AARN,CAAb;AAWA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AACzE,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AAClB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACA,YAAMV,OAAO,CAACW,GAAR,CAAY;AACdJ,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,SAHc;AAId,WAAGV;AAJW,OAAZ,CAAN;AAMH,KAPD,CAOE,OAAOa,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAc,qBAAd,EAAqCA,KAAK,CAACE,OAA3C;AACH;AACJ;;AAED,SAAOd,OAAP;AACH,CAxBM;AA0BP,OAAO,MAAMe,8BAA8B,GAAGC,WAAW,IAAI;AACzD,QAAMC,mBAAmB,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,GAAjB,CAAqBjB,GAAG,IAAI;AACpD,UAAM;AAAEkB,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmBnB,GAAG,CAACoB,IAAJ,EAAzB;AAEA,WAAO;AACHC,MAAAA,SAAS,EAAEC,SAAS,CAACJ,KAAK,CAACK,WAAN,EAAD,CADjB;AAEHC,MAAAA,EAAE,EAAExB,GAAG,CAACwB,EAFL;AAGHN,MAAAA,KAHG;AAIHC,MAAAA;AAJG,KAAP;AAMH,GAT2B,CAA5B;AAWA,SAAOJ,mBAAmB,CAACU,MAApB,CAA2B,CAACC,WAAD,EAAcC,UAAd,KAA6B;AAC3DD,IAAAA,WAAW,CAACC,UAAU,CAACT,KAAX,CAAiBK,WAAjB,EAAD,CAAX,GAA8CI,UAA9C;AACA,WAAOD,WAAP;AACH,GAHM,EAGJ,EAHI,CAAP;AAIH,CAhBM,C,CAkBP;AACA;;AACA,OAAO,MAAME,yBAAyB,GAAG,OAAOC,aAAP,EAAsBC,YAAtB,KAAuC;AAC5E,QAAMC,aAAa,GAAGhC,SAAS,CAAC4B,UAAV,CAAqBE,aAArB,CAAtB;AAEA,QAAMG,KAAK,GAAGjC,SAAS,CAACiC,KAAV,EAAd;AACAF,EAAAA,YAAY,CAACG,OAAb,CAAqBC,GAAG,IAAI;AACxB,UAAMC,SAAS,GAAGJ,aAAa,CAAC/B,GAAd,EAAlB;AACAgC,IAAAA,KAAK,CAACvB,GAAN,CAAU0B,SAAV,EAAqBD,GAArB;AACH,GAHD;AAKA,SAAO,MAAMF,KAAK,CAACI,MAAN,EAAb;AACH,CAVM;AAYP,OAAO,MAAMC,cAAc,GAAG,MAAM;AAChC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAMC,WAAW,GAAGC,IAAI,CAACC,kBAAL,CAAwB/C,QAAQ,IAAI;AACpD6C,MAAAA,WAAW;AACXF,MAAAA,OAAO,CAAC3C,QAAD,CAAP;AACH,KAHmB,EAGjB4C,MAHiB,CAApB;AAIH,GALM,CAAP;AAMH,CAPM,C,CASP;;AACAvD,QAAQ,CAAC2D,aAAT,CAAuB1D,MAAvB;AAEA,OAAO,MAAMwD,IAAI,GAAGzD,QAAQ,CAACyD,IAAT,EAAb;AACP,OAAO,MAAM3C,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,OAAO,MAAM8C,cAAc,GAAG,IAAI5D,QAAQ,CAACyD,IAAT,CAAcI,kBAAlB,EAAvB;AACPD,cAAc,CAACE,mBAAf,CAAmC;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAnC;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAMP,IAAI,CAACQ,eAAL,CAAqBL,cAArB,CAA/B;AAEP,eAAe5D,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nvar config = {\n    apiKey: \"AIzaSyBHQX6mu1EqWkhWYl8L_54bkkgQGOALAkg\",\n    authDomain: \"react-crwn-clothing-dfab6.firebaseapp.com\",\n    databaseURL: \"https://react-crwn-clothing-dfab6.firebaseio.com\",\n    projectId: \"react-crwn-clothing-dfab6\",\n    storageBucket: \"react-crwn-clothing-dfab6.appspot.com\",\n    messagingSenderId: \"998041460050\",\n    appId: \"1:998041460050:web:098a095ab23792e436ee8b\",\n    measurementId: \"G-9RZKVMH8JG\"\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n    if (!userAuth) return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n    const snapshot = await userRef.get();\n\n    if (!snapshot.exists) {\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            });\n        } catch (error) {\n            console.error('Error creating user', error.message);\n        }\n    }\n\n    return userRef;\n};\n\nexport const convertCollectionSnapshotToMap = collections => {\n    const transformCollection = collections.docs.map(doc => {\n        const { title, items } = doc.data();\n\n        return {\n            routeName: encodeURI(title.toLowerCase()),\n            id: doc.id,\n            title,\n            items\n        };\n    });\n\n    return transformCollection.reduce((accumulator, collection) => {\n        accumulator[collection.title.toLowerCase()] = collection;\n        return accumulator;\n    }, {});\n}\n\n// Utilitary to insert data to firebase.\n// CollectionKey: name of the collection document\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey);\n\n    const batch = firestore.batch();\n    objectsToAdd.forEach(obj => {\n        const newDocRef = collectionRef.doc();\n        batch.set(newDocRef, obj);\n    });\n\n    return await batch.commit();\n};\n\nexport const getCurrentUser = () => {\n    return new Promise((resolve, reject) => {\n        const unsubscribe = auth.onAuthStateChanged(userAuth => {\n            unsubscribe();\n            resolve(userAuth);\n        }, reject)\n    });\n};\n\n// Initialize Firebase\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}