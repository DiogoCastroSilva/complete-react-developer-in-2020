{"ast":null,"code":"var _jsxFileName = \"/Users/diogosilva/Desktop/complete-react-developer-in-2020/crwn-clothing/src/components/sign-in/sign-in.component.jsx\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { SignInContainer, TitleContainer, ButtonsBarContainer } from './sign-in.styles';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\n\nconst SignIn = ({\n  onEmailSignInStart,\n  onGoogleSignInStart\n}) => {\n  const [credentials, setCredentials] = useState({\n    email: '',\n    password: ''\n  });\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const {\n      email,\n      password\n    } = credentials;\n    onEmailSignInStart(email, password);\n  };\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setCredentials({\n      [name]: value,\n      ...credentials\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(SignInContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TitleContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, \"I alredy have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, \"Sign in with your email and password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    value: email,\n    required: true,\n    handleChange: handleChange,\n    label: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    value: password,\n    required: true,\n    handleChange: handleChange,\n    label: \"passsword\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(ButtonsBarContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, \"Sign in\"), /*#__PURE__*/React.createElement(CustomButton, {\n    onClick: onGoogleSignInStart,\n    color: \"primary\",\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, \"Sign in with Google\"))));\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onGoogleSignInStart: () => dispatch(googleSignInStart()),\n    onEmailSignInStart: (email, password) => dispatch(emailSignInStart({\n      email: email,\n      password: password\n    }))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/Users/diogosilva/Desktop/complete-react-developer-in-2020/crwn-clothing/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","connect","SignInContainer","TitleContainer","ButtonsBarContainer","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","onEmailSignInStart","onGoogleSignInStart","credentials","setCredentials","email","password","handleSubmit","e","preventDefault","handleChange","name","value","target","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n    SignInContainer,\n    TitleContainer,\n    ButtonsBarContainer\n} from './sign-in.styles';\n\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\n\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\n\nconst SignIn = ({ onEmailSignInStart, onGoogleSignInStart }) => {\n    const [credentials, setCredentials] = useState({\n        email: '',\n        password: ''\n    });\n\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const { email, password } = credentials;\n\n        onEmailSignInStart(email, password);\n    };\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n\n        setCredentials({\n            [name]: value,\n            ...credentials\n        });\n    };\n\n    return (\n        <SignInContainer>\n            <TitleContainer>I alredy have an account</TitleContainer>\n            <span>Sign in with your email and password</span>\n\n            <form onSubmit={handleSubmit}>\n                <FormInput\n                    name='email'\n                    type='email'\n                    value={email}\n                    required\n                    handleChange={handleChange}\n                    label='email'\n                />\n                <FormInput\n                    name='password'\n                    type='password'\n                    value={password}\n                    required\n                    handleChange={handleChange}\n                    label='passsword'\n                />\n                <ButtonsBarContainer>\n                    <CustomButton\n                        type='submit'\n                    >\n                        Sign in\n                    </CustomButton>\n                    <CustomButton\n                        onClick={onGoogleSignInStart}\n                        color='primary'\n                        type='button'\n                    >\n                        Sign in with Google \n                    </CustomButton>\n                </ButtonsBarContainer>\n            </form>\n        </SignInContainer>\n    );\n}\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onGoogleSignInStart: () => dispatch(googleSignInStart()),\n        onEmailSignInStart: (email, password) => dispatch(emailSignInStart({\n            email: email,\n            password: password\n        }))\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}