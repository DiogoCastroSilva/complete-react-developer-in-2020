{"ast":null,"code":"import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\nimport { auth, createUserProfileDocument, googleProvider } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure } from \"./user.actions\";\n\nfunction* getSnapshotFromAuthUser(user) {\n  try {\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromAuthUser(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromAuthUser(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticathed() {\n  try {} catch (error) {\n    yield put(signInFailure());\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/diogosilva/Desktop/complete-react-developer-in-2020/crwn-clothing/src/redux/user/user.sagas.js"],"names":["all","call","put","takeLatest","UserActionTypes","auth","createUserProfileDocument","googleProvider","signInSuccess","signInFailure","getSnapshotFromAuthUser","user","userRef","userSnapshot","get","id","data","error","signInWithGoogle","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticathed","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,IAAT,EAAeC,yBAAf,EAA0CC,cAA1C,QAAgE,+BAAhE;AACA,SACIC,aADJ,EAEIC,aAFJ,QAGO,gBAHP;;AAMA,UAAUC,uBAAV,CAAkCC,IAAlC,EAAwC;AACpC,MAAI;AACA,UAAMC,OAAO,GAAG,MAAMX,IAAI,CAACK,yBAAD,EAA4BK,IAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMZ,GAAG,CAACM,aAAa,CAAC;AACpBO,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADG;AAEpB,SAAGF,YAAY,CAACG,IAAb;AAFiB,KAAD,CAAd,CAAT;AAIH,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZ,UAAMf,GAAG,CAACO,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAI;AACA,UAAM;AAAEP,MAAAA;AAAF,QAAW,MAAMN,IAAI,CAACc,eAAL,CAAqBZ,cAArB,CAAvB;AACA,UAAMG,uBAAuB,CAACC,IAAD,CAA7B;AACH,GAHD,CAGE,OAAOM,KAAP,EAAc;AACZ,UAAMf,GAAG,CAACO,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUG,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AAC/D,MAAI;AACA,UAAM;AAAEZ,MAAAA;AAAF,QAAW,MAAMN,IAAI,CAACmB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMb,uBAAuB,CAACC,IAAD,CAA7B;AACH,GAHD,CAGE,OAAOM,KAAP,EAAc;AACZ,UAAMf,GAAG,CAACO,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUQ,oBAAV,GAAiC;AACpC,MAAI,CAEH,CAFD,CAEE,OAAOR,KAAP,EAAc;AACZ,UAAMf,GAAG,CAACO,aAAa,EAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUiB,mBAAV,GAAgC;AACnC,QAAMvB,UAAU,CAACC,eAAe,CAACuB,oBAAjB,EAAuCT,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUU,kBAAV,GAA+B;AAClC,QAAMzB,UAAU,CAACC,eAAe,CAACyB,mBAAjB,EAAsCT,eAAtC,CAAhB;AACH;AAED,OAAO,UAAUU,kBAAV,GAA+B;AAClC,QAAM3B,UAAU,CAACC,eAAe,CAAC2B,kBAAjB,CAAhB;AACH;AAED,OAAO,UAAUC,SAAV,GAAsB;AACzB,QAAMhC,GAAG,CAAC,CACNC,IAAI,CAACyB,mBAAD,CADE,EAENzB,IAAI,CAAC2B,kBAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\n\nimport { auth, createUserProfileDocument, googleProvider } from '../../firebase/firebase.utils';\nimport {\n    signInSuccess,\n    signInFailure,\n} from \"./user.actions\";\n\n\nfunction* getSnapshotFromAuthUser(user) {\n    try {\n        const userRef = yield call(createUserProfileDocument, user);\n        const userSnapshot = yield userRef.get();\n        yield put(signInSuccess({\n            id: userSnapshot.id,\n            ...userSnapshot.data()\n        }));\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* signInWithGoogle() {\n    try {\n        const { user } = yield auth.signInWithPopup(googleProvider);\n        yield getSnapshotFromAuthUser(user);\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* signInWithEmail({Â payload: { email, password } }) {\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromAuthUser(user);\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* isUserAuthenticathed() {\n    try {\n\n    } catch (error) {\n        yield put(signInFailure());\n    }\n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, );\n}\n\nexport function* userSagas() {\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart)\n    ]);\n}"]},"metadata":{},"sourceType":"module"}